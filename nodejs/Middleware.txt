Express.js is a routing and Middleware framework for handling the different routing of the webpage 
and it works between the request and response cycle. Middleware gets executed after the server 
receives the request and before the controller actions send the response. Middleware has the 
access to the request object, responses object, and next, it can process the request before the 
server send a response. An Express-based application is a series of middleware function calls.
 
Middleware functions are functions that have access to the request object (req), 
the response object (res), and the next middleware function in the applicationâ€™s 
request-response cycle. The next middleware function is commonly denoted by a variable named next.

Middleware functions can perform the following tasks

Execute any code.
Make changes to the request and the response objects.
End the request-response cycle.
Call the next middleware function in the stack.
If the current middleware function does not end the request-response cycle, 
it must call next() to pass control to the next middleware function. 
Otherwise, the request will be left hanging.

Middleware working

Advantages of using middleware:

Middleware can process request objects multiple times before the server works for that request.
Middleware can be used to add logging and authentication functionality.
Middleware improves client-side rendering performance.
Middleware is used for setting some specific HTTP headers.
Middleware helps for Optimization and better performance.
Middleware Chaining: Middleware can be chained from one to another, Hence creating a chain of 
functions that are executed in order. The last function sends the response back to the browser. 
So, before sending the response back to the browser the different middleware process the request.

The next() function in the express is responsible for calling the next middleware function if there is one.
